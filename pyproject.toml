[project]
name = "quantix-trading"
version = "0.2.0"
description = "Fast and intuitive backtesting for Python"
authors = [
    {name = "Ivan Sharapenkov", email = "ivan.sharapenkov@assaia.com"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["backtesting", "trading", "finance", "quantitative", "quant", "algorithmic-trading"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy (>=2.2.6,<3.0.0)",
    "pandas (>=2.2.3,<3.0.0)",
    "numba (>=0.61.2,<0.62.0)",
]

[project.urls]
Homepage = "https://github.com/quantix-io/quantix"
Repository = "https://github.com/quantix-io/quantix"
Issues = "https://github.com/quantix-io/quantix/issues"
Documentation = "https://github.com/quantix-io/quantix"

[tool.poetry]
packages = [{include = "quantix", from = "src"}]

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
ruff = "^0.11.11"
mypy = "^1.15.0"
pre-commit = "^4.2.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.14"
mkdocstrings = {extras = ["python"], version = "^0.29.1"}

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py38"
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = ["E501"]  # line too long - handled by formatter

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "--cov=quantix",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]